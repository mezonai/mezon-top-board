version: '3.8'
name: mezon-top-board

services:
  postgres:
    image: postgres:14-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - main_net

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    depends_on:
      postgres:
        condition: service_healthy
    links:
      - postgres
    environment:
      PORT: 8123
      POSTGRES_USERNAME: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_SCHEMA: ${POSTGRES_SCHEMA}
      OAUTH2_CLIENT_ID: ${OAUTH2_CLIENT_ID}
      OAUTH2_CLIENT_SECRET: ${OAUTH2_CLIENT_SECRET}
      OAUTH2_REDIRECT_URI: ${OAUTH2_REDIRECT_URI}
      OAUTH2_API_URL: ${OAUTH2_API_URL}
      OAUTH2_URL_TOKEN_PATH: ${OAUTH2_URL_TOKEN_PATH}
      OAUTH2_URL_DECODE_PATH: ${OAUTH2_URL_DECODE_PATH}
      JWT_ACCESS_TOKEN_SECRET: ${JWT_ACCESS_TOKEN_SECRET}
      JWT_REFRESH_TOKEN_SECRET: ${JWT_REFRESH_TOKEN_SECRET}
      JWT_ACCESS_TOKEN_EXPIRES_IN_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRES_IN_MINUTES}
      JWT_REFRESH_TOKEN_EXPIRES_IN_MINUTES: ${JWT_REFRESH_TOKEN_EXPIRES_IN_MINUTES}
    networks:
      - main_net

  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      args:
        REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL}
        REACT_APP_OAUTH2_CLIENT_ID: ${REACT_APP_OAUTH2_CLIENT_ID}
        REACT_APP_OAUTH2_REDIRECT_URI: ${REACT_APP_OAUTH2_REDIRECT_URI}
        REACT_APP_OAUTH2_AUTHORIZE_URL: ${REACT_APP_OAUTH2_AUTHORIZE_URL}
        REACT_APP_OAUTH2_RESPONSE_TYPE: ${REACT_APP_OAUTH2_RESPONSE_TYPE}
        REACT_APP_OAUTH2_SCOPE: ${REACT_APP_OAUTH2_SCOPE}
    container_name: frontend
    networks:
      - main_net
  
  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/www/:/var/www/certbot/
    depends_on:
      - backend
      - frontend
    ports:
      - 80:80
      - 443:443
      - 8778:8778
    networks:
      - main_net
  
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/
      - ./certbot/conf/:/etc/letsencrypt/

volumes:
  postgres_data:

networks:
  main_net: